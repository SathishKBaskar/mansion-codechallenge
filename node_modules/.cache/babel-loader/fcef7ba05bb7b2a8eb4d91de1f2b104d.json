{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDebounce } from 'use-debounce';\nimport uuid from 'uuid';\nimport { isSuggestionFormat, errorHandler } from './utils';\n\nconst AnyAutocomplete = ({\n  children,\n  value,\n  onChange,\n  onSelect,\n  fetchUrl,\n  suggestionParser,\n  debounce\n}) => {\n  const [suggestions, setSuggestions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(value);\n  const debouncedSearchTerm = useDebounce(searchTerm, debounce);\n  useEffect(() => {\n    debouncedFetchSuggestions();\n  }, [debouncedSearchTerm]);\n\n  const clearSuggestions = () => suggestions.length && setSuggestions([]);\n\n  const setActiveSuggestion = index => setSuggestions(suggestions.map(suggestion => _extends({}, suggestion, {\n    active: suggestion.index === index\n  })));\n\n  const clearActiveSuggestion = () => setSuggestions(suggestions.map(suggestion => _extends({}, suggestion, {\n    active: false\n  })));\n\n  const fetchSuggestions = async apiUrl => {\n    setError(false);\n    setLoading(true);\n\n    try {\n      const response = await fetch(apiUrl);\n\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n\n      const json = await response.json();\n      let fetchedSuggestions = suggestionParser(json);\n\n      if (!isSuggestionFormat(fetchedSuggestions)) {\n        throw new Error('suggestionParser::description');\n      }\n\n      fetchedSuggestions = fetchedSuggestions.map((suggestion, idx) => _extends({}, suggestion, {\n        key: uuid(),\n        index: idx,\n        active: false\n      }));\n      setSuggestions(fetchedSuggestions);\n    } catch (error) {\n      setError(true);\n      errorHandler(error.message);\n    }\n\n    setLoading(false);\n  };\n\n  const debouncedFetchSuggestions = () => {\n    if (!debouncedSearchTerm) return clearSuggestions();\n    const url = fetchUrl instanceof Function ? fetchUrl({\n      searchQuery: debouncedSearchTerm\n    }) : fetchUrl;\n    fetchSuggestions(url);\n  };\n\n  const handleInputChange = event => {\n    const {\n      value: inputValue\n    } = event.target;\n    onChange(inputValue);\n    setSearchTerm(inputValue);\n  };\n\n  const handleInputOnBlur = () => clearSuggestions();\n\n  const handleSuggestionClick = (e, suggestion) => {\n    e.preventDefault();\n    onSelect(suggestion);\n    onChange(suggestion.description);\n    clearSuggestions();\n  };\n\n  const handleSuggestionMouseEnter = index => setActiveSuggestion(index);\n\n  const handleSuggestionMouseLeave = () => clearActiveSuggestion();\n\n  const handleDownKey = () => {\n    if (!suggestions.length) return;\n    const activeSuggestion = getActiveSuggestion();\n\n    if (!activeSuggestion) {\n      setActiveSuggestion(0);\n    } else if (activeSuggestion.index < suggestions.length - 1) {\n      setActiveSuggestion(activeSuggestion.index + 1);\n    }\n  };\n\n  const handleUpKey = () => {\n    if (!suggestions.length) return;\n    const activeSuggestion = getActiveSuggestion();\n\n    if (activeSuggestion && activeSuggestion.index > 0) {\n      setActiveSuggestion(activeSuggestion.index - 1);\n    }\n  };\n\n  const handleEnterKey = () => {\n    if (!suggestions.length) return;\n    const activeSuggestion = getActiveSuggestion();\n    if (!activeSuggestion) return;\n    onChange(activeSuggestion.description);\n    onSelect(activeSuggestion);\n    clearSuggestions();\n  };\n\n  const handleInputKeyDown = e => {\n    switch (e.key) {\n      case 'Enter':\n        e.preventDefault();\n        handleEnterKey();\n        break;\n\n      case 'ArrowDown':\n        e.preventDefault(); // prevent the cursor from moving\n\n        handleDownKey();\n        break;\n\n      case 'ArrowUp':\n        e.preventDefault(); // prevent the cursor from moving\n\n        handleUpKey();\n        break;\n\n      case 'Escape':\n        clearSuggestions();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const getActiveSuggestion = () => suggestions.find(suggestion => suggestion.active);\n\n  const getActiveSuggestionId = () => {\n    const activeSuggestion = getActiveSuggestion();\n    return activeSuggestion ? `PlacesAutocomplete__suggestion-${activeSuggestion.key}` : null;\n  };\n\n  const getSuggestionProps = (suggestion, options = {}) => _extends({}, options, {\n    id: getActiveSuggestionId(),\n    key: suggestion.key,\n    active: suggestion.active,\n    onMouseDown: e => handleSuggestionClick(e, suggestion),\n    onMouseEnter: () => handleSuggestionMouseEnter(suggestion.index),\n    onMouseLeave: () => handleSuggestionMouseLeave()\n  });\n\n  const createInputProps = (options = {}) => {\n    return _extends({\n      type: 'text',\n      autoComplete: 'off',\n      role: 'combobox',\n      'aria-autocomplete': 'list',\n      'aria-expanded': suggestions.length > 0,\n      'aria-activedescendant': getActiveSuggestionId()\n    }, options, {\n      onKeyDown: e => {\n        handleInputKeyDown(e);\n        if (options.onKeyDown) options.onKeyDown(e);\n      },\n      value,\n      onBlur: e => {\n        handleInputOnBlur(e);\n        if (options.onBlur) options.onBlur(e);\n      },\n      onChange: event => {\n        handleInputChange(event);\n      }\n    });\n  };\n\n  if (typeof children !== 'function') return null;\n  return children({\n    inputProps: createInputProps,\n    suggestions,\n    getSuggestionProps,\n    loading,\n    error\n  });\n};\n\nAnyAutocomplete.propTypes = {\n  onChange: PropTypes.func,\n  onSelect: PropTypes.func,\n  fetchUrl: PropTypes.oneOfType([PropTypes.func, PropTypes.string]).isRequired,\n  suggestionParser: PropTypes.func.isRequired,\n  debounce: PropTypes.number,\n  children: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired\n};\nAnyAutocomplete.defaultProps = {\n  onChange: () => {},\n  onSelect: () => {},\n  debounce: 200\n};\nexport default AnyAutocomplete;","map":{"version":3,"sources":["/Users/sathishbaskar/Documents/React/mansion-code-challenge/node_modules/react-fetch-autocomplete/lib/index.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","useState","useEffect","PropTypes","useDebounce","uuid","isSuggestionFormat","errorHandler","AnyAutocomplete","children","value","onChange","onSelect","fetchUrl","suggestionParser","debounce","suggestions","setSuggestions","loading","setLoading","error","setError","searchTerm","setSearchTerm","debouncedSearchTerm","debouncedFetchSuggestions","clearSuggestions","setActiveSuggestion","index","map","suggestion","active","clearActiveSuggestion","fetchSuggestions","apiUrl","response","fetch","ok","Error","statusText","json","fetchedSuggestions","idx","message","url","Function","searchQuery","handleInputChange","event","inputValue","handleInputOnBlur","handleSuggestionClick","e","preventDefault","description","handleSuggestionMouseEnter","handleSuggestionMouseLeave","handleDownKey","activeSuggestion","getActiveSuggestion","handleUpKey","handleEnterKey","handleInputKeyDown","find","getActiveSuggestionId","getSuggestionProps","options","id","onMouseDown","onMouseEnter","onMouseLeave","createInputProps","type","autoComplete","role","onKeyDown","onBlur","inputProps","propTypes","func","oneOfType","string","isRequired","number","defaultProps"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAAUC,MAAV,EAAkB;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAtB;;AAA2B,SAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,UAAIN,MAAM,CAACQ,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AAAEL,QAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AAA4B;AAAE;AAAE;;AAAC,SAAOL,MAAP;AAAgB,CAAhQ;;AAEA,SAASS,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,SAASC,kBAAT,EAA6BC,YAA7B,QAAiD,SAAjD;;AAEA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,KAAZ;AAAmBC,EAAAA,QAAnB;AAA6BC,EAAAA,QAA7B;AAAuCC,EAAAA,QAAvC;AAAiDC,EAAAA,gBAAjD;AAAmEC,EAAAA;AAAnE,CAAD,KAAmF;AACzG,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACiB,OAAD,EAAUC,UAAV,IAAwBlB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACmB,KAAD,EAAQC,QAAR,IAAoBpB,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACqB,UAAD,EAAaC,aAAb,IAA8BtB,QAAQ,CAACS,KAAD,CAA5C;AAEA,QAAMc,mBAAmB,GAAGpB,WAAW,CAACkB,UAAD,EAAaP,QAAb,CAAvC;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,yBAAyB;AAC1B,GAFQ,EAEN,CAACD,mBAAD,CAFM,CAAT;;AAIA,QAAME,gBAAgB,GAAG,MAAMV,WAAW,CAACrB,MAAZ,IAAsBsB,cAAc,CAAC,EAAD,CAAnE;;AAEA,QAAMU,mBAAmB,GAAGC,KAAK,IAAIX,cAAc,CAACD,WAAW,CAACa,GAAZ,CAAgBC,UAAU,IAAIzC,QAAQ,CAAC,EAAD,EAAKyC,UAAL,EAAiB;AACzGC,IAAAA,MAAM,EAAED,UAAU,CAACF,KAAX,KAAqBA;AAD4E,GAAjB,CAAtC,CAAD,CAAnD;;AAIA,QAAMI,qBAAqB,GAAG,MAAMf,cAAc,CAACD,WAAW,CAACa,GAAZ,CAAgBC,UAAU,IAAIzC,QAAQ,CAAC,EAAD,EAAKyC,UAAL,EAAiB;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAAjB,CAAtC,CAAD,CAAlD;;AAEA,QAAME,gBAAgB,GAAG,MAAMC,MAAN,IAAgB;AACvCb,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACF,YAAMgB,QAAQ,GAAG,MAAMC,KAAK,CAACF,MAAD,CAA5B;;AAEA,UAAI,CAACC,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAMC,KAAK,CAACH,QAAQ,CAACI,UAAV,CAAX;AACD;;AAED,YAAMC,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAT,EAAnB;AACA,UAAIC,kBAAkB,GAAG3B,gBAAgB,CAAC0B,IAAD,CAAzC;;AACA,UAAI,CAAClC,kBAAkB,CAACmC,kBAAD,CAAvB,EAA6C;AAC3C,cAAM,IAAIH,KAAJ,CAAU,+BAAV,CAAN;AACD;;AACDG,MAAAA,kBAAkB,GAAGA,kBAAkB,CAACZ,GAAnB,CAAuB,CAACC,UAAD,EAAaY,GAAb,KAAqBrD,QAAQ,CAAC,EAAD,EAAKyC,UAAL,EAAiB;AACxFjC,QAAAA,GAAG,EAAEQ,IAAI,EAD+E;AAExFuB,QAAAA,KAAK,EAAEc,GAFiF;AAGxFX,QAAAA,MAAM,EAAE;AAHgF,OAAjB,CAApD,CAArB;AAKAd,MAAAA,cAAc,CAACwB,kBAAD,CAAd;AACD,KAlBD,CAkBE,OAAOrB,KAAP,EAAc;AACdC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAd,MAAAA,YAAY,CAACa,KAAK,CAACuB,OAAP,CAAZ;AACD;;AACDxB,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GA1BD;;AA4BA,QAAMM,yBAAyB,GAAG,MAAM;AACtC,QAAI,CAACD,mBAAL,EAA0B,OAAOE,gBAAgB,EAAvB;AAC1B,UAAMkB,GAAG,GAAG/B,QAAQ,YAAYgC,QAApB,GAA+BhC,QAAQ,CAAC;AAAEiC,MAAAA,WAAW,EAAEtB;AAAf,KAAD,CAAvC,GAAgFX,QAA5F;AACAoB,IAAAA,gBAAgB,CAACW,GAAD,CAAhB;AACD,GAJD;;AAMA,QAAMG,iBAAiB,GAAGC,KAAK,IAAI;AACjC,UAAM;AAAEtC,MAAAA,KAAK,EAAEuC;AAAT,QAAwBD,KAAK,CAACxD,MAApC;AACAmB,IAAAA,QAAQ,CAACsC,UAAD,CAAR;AACA1B,IAAAA,aAAa,CAAC0B,UAAD,CAAb;AACD,GAJD;;AAMA,QAAMC,iBAAiB,GAAG,MAAMxB,gBAAgB,EAAhD;;AAEA,QAAMyB,qBAAqB,GAAG,CAACC,CAAD,EAAItB,UAAJ,KAAmB;AAC/CsB,IAAAA,CAAC,CAACC,cAAF;AACAzC,IAAAA,QAAQ,CAACkB,UAAD,CAAR;AACAnB,IAAAA,QAAQ,CAACmB,UAAU,CAACwB,WAAZ,CAAR;AACA5B,IAAAA,gBAAgB;AACjB,GALD;;AAOA,QAAM6B,0BAA0B,GAAG3B,KAAK,IAAID,mBAAmB,CAACC,KAAD,CAA/D;;AAEA,QAAM4B,0BAA0B,GAAG,MAAMxB,qBAAqB,EAA9D;;AAEA,QAAMyB,aAAa,GAAG,MAAM;AAC1B,QAAI,CAACzC,WAAW,CAACrB,MAAjB,EAAyB;AACzB,UAAM+D,gBAAgB,GAAGC,mBAAmB,EAA5C;;AACA,QAAI,CAACD,gBAAL,EAAuB;AACrB/B,MAAAA,mBAAmB,CAAC,CAAD,CAAnB;AACD,KAFD,MAEO,IAAI+B,gBAAgB,CAAC9B,KAAjB,GAAyBZ,WAAW,CAACrB,MAAZ,GAAqB,CAAlD,EAAqD;AAC1DgC,MAAAA,mBAAmB,CAAC+B,gBAAgB,CAAC9B,KAAjB,GAAyB,CAA1B,CAAnB;AACD;AACF,GARD;;AAUA,QAAMgC,WAAW,GAAG,MAAM;AACxB,QAAI,CAAC5C,WAAW,CAACrB,MAAjB,EAAyB;AACzB,UAAM+D,gBAAgB,GAAGC,mBAAmB,EAA5C;;AACA,QAAID,gBAAgB,IAAIA,gBAAgB,CAAC9B,KAAjB,GAAyB,CAAjD,EAAoD;AAClDD,MAAAA,mBAAmB,CAAC+B,gBAAgB,CAAC9B,KAAjB,GAAyB,CAA1B,CAAnB;AACD;AACF,GAND;;AAQA,QAAMiC,cAAc,GAAG,MAAM;AAC3B,QAAI,CAAC7C,WAAW,CAACrB,MAAjB,EAAyB;AACzB,UAAM+D,gBAAgB,GAAGC,mBAAmB,EAA5C;AACA,QAAI,CAACD,gBAAL,EAAuB;AACvB/C,IAAAA,QAAQ,CAAC+C,gBAAgB,CAACJ,WAAlB,CAAR;AACA1C,IAAAA,QAAQ,CAAC8C,gBAAD,CAAR;AACAhC,IAAAA,gBAAgB;AACjB,GAPD;;AASA,QAAMoC,kBAAkB,GAAGV,CAAC,IAAI;AAC9B,YAAQA,CAAC,CAACvD,GAAV;AACE,WAAK,OAAL;AACEuD,QAAAA,CAAC,CAACC,cAAF;AACAQ,QAAAA,cAAc;AACd;;AACF,WAAK,WAAL;AACET,QAAAA,CAAC,CAACC,cAAF,GADF,CACsB;;AACpBI,QAAAA,aAAa;AACb;;AACF,WAAK,SAAL;AACEL,QAAAA,CAAC,CAACC,cAAF,GADF,CACsB;;AACpBO,QAAAA,WAAW;AACX;;AACF,WAAK,QAAL;AACElC,QAAAA,gBAAgB;AAChB;;AACF;AACE;AAjBJ;AAmBD,GApBD;;AAsBA,QAAMiC,mBAAmB,GAAG,MAAM3C,WAAW,CAAC+C,IAAZ,CAAiBjC,UAAU,IAAIA,UAAU,CAACC,MAA1C,CAAlC;;AAEA,QAAMiC,qBAAqB,GAAG,MAAM;AAClC,UAAMN,gBAAgB,GAAGC,mBAAmB,EAA5C;AACA,WAAOD,gBAAgB,GAAI,kCAAiCA,gBAAgB,CAAC7D,GAAI,EAA1D,GAA8D,IAArF;AACD,GAHD;;AAKA,QAAMoE,kBAAkB,GAAG,CAACnC,UAAD,EAAaoC,OAAO,GAAG,EAAvB,KAA8B7E,QAAQ,CAAC,EAAD,EAAK6E,OAAL,EAAc;AAC7EC,IAAAA,EAAE,EAAEH,qBAAqB,EADoD;AAE7EnE,IAAAA,GAAG,EAAEiC,UAAU,CAACjC,GAF6D;AAG7EkC,IAAAA,MAAM,EAAED,UAAU,CAACC,MAH0D;AAI7EqC,IAAAA,WAAW,EAAEhB,CAAC,IAAID,qBAAqB,CAACC,CAAD,EAAItB,UAAJ,CAJsC;AAK7EuC,IAAAA,YAAY,EAAE,MAAMd,0BAA0B,CAACzB,UAAU,CAACF,KAAZ,CAL+B;AAM7E0C,IAAAA,YAAY,EAAE,MAAMd,0BAA0B;AAN+B,GAAd,CAAjE;;AASA,QAAMe,gBAAgB,GAAG,CAACL,OAAO,GAAG,EAAX,KAAkB;AACzC,WAAO7E,QAAQ,CAAC;AACdmF,MAAAA,IAAI,EAAE,MADQ;AAEdC,MAAAA,YAAY,EAAE,KAFA;AAGdC,MAAAA,IAAI,EAAE,UAHQ;AAId,2BAAqB,MAJP;AAKd,uBAAiB1D,WAAW,CAACrB,MAAZ,GAAqB,CALxB;AAMd,+BAAyBqE,qBAAqB;AANhC,KAAD,EAOZE,OAPY,EAOH;AACVS,MAAAA,SAAS,EAAEvB,CAAC,IAAI;AACdU,QAAAA,kBAAkB,CAACV,CAAD,CAAlB;AACA,YAAIc,OAAO,CAACS,SAAZ,EAAuBT,OAAO,CAACS,SAAR,CAAkBvB,CAAlB;AACxB,OAJS;AAKV1C,MAAAA,KALU;AAMVkE,MAAAA,MAAM,EAAExB,CAAC,IAAI;AACXF,QAAAA,iBAAiB,CAACE,CAAD,CAAjB;AACA,YAAIc,OAAO,CAACU,MAAZ,EAAoBV,OAAO,CAACU,MAAR,CAAexB,CAAf;AACrB,OATS;AAUVzC,MAAAA,QAAQ,EAAEqC,KAAK,IAAI;AACjBD,QAAAA,iBAAiB,CAACC,KAAD,CAAjB;AACD;AAZS,KAPG,CAAf;AAqBD,GAtBD;;AAwBA,MAAI,OAAOvC,QAAP,KAAoB,UAAxB,EAAoC,OAAO,IAAP;AAEpC,SAAOA,QAAQ,CAAC;AACdoE,IAAAA,UAAU,EAAEN,gBADE;AAEdvD,IAAAA,WAFc;AAGdiD,IAAAA,kBAHc;AAId/C,IAAAA,OAJc;AAKdE,IAAAA;AALc,GAAD,CAAf;AAOD,CA3KD;;AA6KAZ,eAAe,CAACsE,SAAhB,GAA4B;AAC1BnE,EAAAA,QAAQ,EAAER,SAAS,CAAC4E,IADM;AAE1BnE,EAAAA,QAAQ,EAAET,SAAS,CAAC4E,IAFM;AAG1BlE,EAAAA,QAAQ,EAAEV,SAAS,CAAC6E,SAAV,CAAoB,CAAC7E,SAAS,CAAC4E,IAAX,EAAiB5E,SAAS,CAAC8E,MAA3B,CAApB,EAAwDC,UAHxC;AAI1BpE,EAAAA,gBAAgB,EAAEX,SAAS,CAAC4E,IAAV,CAAeG,UAJP;AAK1BnE,EAAAA,QAAQ,EAAEZ,SAAS,CAACgF,MALM;AAM1B1E,EAAAA,QAAQ,EAAEN,SAAS,CAAC4E,IAAV,CAAeG,UANC;AAO1BxE,EAAAA,KAAK,EAAEP,SAAS,CAAC8E,MAAV,CAAiBC;AAPE,CAA5B;AAUA1E,eAAe,CAAC4E,YAAhB,GAA+B;AAC7BzE,EAAAA,QAAQ,EAAE,MAAM,CAAE,CADW;AAE7BC,EAAAA,QAAQ,EAAE,MAAM,CAAE,CAFW;AAG7BG,EAAAA,QAAQ,EAAE;AAHmB,CAA/B;AAMA,eAAeP,eAAf","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDebounce } from 'use-debounce';\nimport uuid from 'uuid';\n\nimport { isSuggestionFormat, errorHandler } from './utils';\n\nconst AnyAutocomplete = ({ children, value, onChange, onSelect, fetchUrl, suggestionParser, debounce }) => {\n  const [suggestions, setSuggestions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(value);\n\n  const debouncedSearchTerm = useDebounce(searchTerm, debounce);\n\n  useEffect(() => {\n    debouncedFetchSuggestions();\n  }, [debouncedSearchTerm]);\n\n  const clearSuggestions = () => suggestions.length && setSuggestions([]);\n\n  const setActiveSuggestion = index => setSuggestions(suggestions.map(suggestion => _extends({}, suggestion, {\n    active: suggestion.index === index\n  })));\n\n  const clearActiveSuggestion = () => setSuggestions(suggestions.map(suggestion => _extends({}, suggestion, { active: false })));\n\n  const fetchSuggestions = async apiUrl => {\n    setError(false);\n    setLoading(true);\n    try {\n      const response = await fetch(apiUrl);\n\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n\n      const json = await response.json();\n      let fetchedSuggestions = suggestionParser(json);\n      if (!isSuggestionFormat(fetchedSuggestions)) {\n        throw new Error('suggestionParser::description');\n      }\n      fetchedSuggestions = fetchedSuggestions.map((suggestion, idx) => _extends({}, suggestion, {\n        key: uuid(),\n        index: idx,\n        active: false\n      }));\n      setSuggestions(fetchedSuggestions);\n    } catch (error) {\n      setError(true);\n      errorHandler(error.message);\n    }\n    setLoading(false);\n  };\n\n  const debouncedFetchSuggestions = () => {\n    if (!debouncedSearchTerm) return clearSuggestions();\n    const url = fetchUrl instanceof Function ? fetchUrl({ searchQuery: debouncedSearchTerm }) : fetchUrl;\n    fetchSuggestions(url);\n  };\n\n  const handleInputChange = event => {\n    const { value: inputValue } = event.target;\n    onChange(inputValue);\n    setSearchTerm(inputValue);\n  };\n\n  const handleInputOnBlur = () => clearSuggestions();\n\n  const handleSuggestionClick = (e, suggestion) => {\n    e.preventDefault();\n    onSelect(suggestion);\n    onChange(suggestion.description);\n    clearSuggestions();\n  };\n\n  const handleSuggestionMouseEnter = index => setActiveSuggestion(index);\n\n  const handleSuggestionMouseLeave = () => clearActiveSuggestion();\n\n  const handleDownKey = () => {\n    if (!suggestions.length) return;\n    const activeSuggestion = getActiveSuggestion();\n    if (!activeSuggestion) {\n      setActiveSuggestion(0);\n    } else if (activeSuggestion.index < suggestions.length - 1) {\n      setActiveSuggestion(activeSuggestion.index + 1);\n    }\n  };\n\n  const handleUpKey = () => {\n    if (!suggestions.length) return;\n    const activeSuggestion = getActiveSuggestion();\n    if (activeSuggestion && activeSuggestion.index > 0) {\n      setActiveSuggestion(activeSuggestion.index - 1);\n    }\n  };\n\n  const handleEnterKey = () => {\n    if (!suggestions.length) return;\n    const activeSuggestion = getActiveSuggestion();\n    if (!activeSuggestion) return;\n    onChange(activeSuggestion.description);\n    onSelect(activeSuggestion);\n    clearSuggestions();\n  };\n\n  const handleInputKeyDown = e => {\n    switch (e.key) {\n      case 'Enter':\n        e.preventDefault();\n        handleEnterKey();\n        break;\n      case 'ArrowDown':\n        e.preventDefault(); // prevent the cursor from moving\n        handleDownKey();\n        break;\n      case 'ArrowUp':\n        e.preventDefault(); // prevent the cursor from moving\n        handleUpKey();\n        break;\n      case 'Escape':\n        clearSuggestions();\n        break;\n      default:\n        break;\n    }\n  };\n\n  const getActiveSuggestion = () => suggestions.find(suggestion => suggestion.active);\n\n  const getActiveSuggestionId = () => {\n    const activeSuggestion = getActiveSuggestion();\n    return activeSuggestion ? `PlacesAutocomplete__suggestion-${activeSuggestion.key}` : null;\n  };\n\n  const getSuggestionProps = (suggestion, options = {}) => _extends({}, options, {\n    id: getActiveSuggestionId(),\n    key: suggestion.key,\n    active: suggestion.active,\n    onMouseDown: e => handleSuggestionClick(e, suggestion),\n    onMouseEnter: () => handleSuggestionMouseEnter(suggestion.index),\n    onMouseLeave: () => handleSuggestionMouseLeave()\n  });\n\n  const createInputProps = (options = {}) => {\n    return _extends({\n      type: 'text',\n      autoComplete: 'off',\n      role: 'combobox',\n      'aria-autocomplete': 'list',\n      'aria-expanded': suggestions.length > 0,\n      'aria-activedescendant': getActiveSuggestionId()\n    }, options, {\n      onKeyDown: e => {\n        handleInputKeyDown(e);\n        if (options.onKeyDown) options.onKeyDown(e);\n      },\n      value,\n      onBlur: e => {\n        handleInputOnBlur(e);\n        if (options.onBlur) options.onBlur(e);\n      },\n      onChange: event => {\n        handleInputChange(event);\n      }\n    });\n  };\n\n  if (typeof children !== 'function') return null;\n\n  return children({\n    inputProps: createInputProps,\n    suggestions,\n    getSuggestionProps,\n    loading,\n    error\n  });\n};\n\nAnyAutocomplete.propTypes = {\n  onChange: PropTypes.func,\n  onSelect: PropTypes.func,\n  fetchUrl: PropTypes.oneOfType([PropTypes.func, PropTypes.string]).isRequired,\n  suggestionParser: PropTypes.func.isRequired,\n  debounce: PropTypes.number,\n  children: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired\n};\n\nAnyAutocomplete.defaultProps = {\n  onChange: () => {},\n  onSelect: () => {},\n  debounce: 200\n};\n\nexport default AnyAutocomplete;"]},"metadata":{},"sourceType":"module"}