{"ast":null,"code":"var _jsxFileName = \"/Users/sathishbaskar/Documents/React/mansion-code-challenge/src/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport React from \"react\";\nimport ReactFetchAutocomplete from \"react-fetch-autocomplete\"; // A custom suggestion parser which should always\n// return an array of objects\n// containing at least a description\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst suggestionParser = data => data.features.map(feature => ({\n  description: feature.place_name,\n  coords: feature.center\n}));\n\nconst MyComponent = () => {\n  _s();\n\n  const [value, setValue] = useState(\"\");\n  const [selection, setSelection] = useState(null);\n  const apiKey = \"Your_API_key\"; // fetchUrl is in this case a method that returns\n  // a URL but can also be a plain string\n\n  const fetchUrl = ({\n    searchQuery\n  }) => `http://yourendpoint.com?someParam=${searchQuery}&api_key=${apiKey}`;\n\n  return /*#__PURE__*/_jsxDEV(ReactFetchAutocomplete, {\n    value: value,\n    onChange: setValue,\n    onSelect: setSelection,\n    fetchUrl: fetchUrl,\n    suggestionParser: suggestionParser,\n    children: ({\n      inputProps,\n      getSuggestionProps,\n      suggestions,\n      error,\n      loading\n    }) => {\n      if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"We have an error..\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 27\n      }, this);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", { ...inputProps({\n            placeholder: \"Search for something..\"\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading..\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }, this), suggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: suggestions.map(suggestion => /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionProps(suggestion),\n            children: suggestion.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MyComponent, \"iXZD4wYLwIRLuEtPX2bUb1Mq25I=\");\n\n_c = MyComponent;\nexport default MyComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyComponent\");","map":{"version":3,"sources":["/Users/sathishbaskar/Documents/React/mansion-code-challenge/src/App.js"],"names":["React","ReactFetchAutocomplete","suggestionParser","data","features","map","feature","description","place_name","coords","center","MyComponent","value","setValue","useState","selection","setSelection","apiKey","fetchUrl","searchQuery","inputProps","getSuggestionProps","suggestions","error","loading","placeholder","length","suggestion"],"mappings":";;;;AACA,OAAO,WAAP;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,sBAAP,MAAmC,0BAAnC,C,CAIA;AACA;AACA;;;;AACA,MAAMC,gBAAgB,GAAGC,IAAI,IAC3BA,IAAI,CAACC,QAAL,CAAcC,GAAd,CAAkBC,OAAO,KAAK;AAC5BC,EAAAA,WAAW,EAAED,OAAO,CAACE,UADO;AAE5BC,EAAAA,MAAM,EAAEH,OAAO,CAACI;AAFY,CAAL,CAAzB,CADF;;AAMA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBC,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BF,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAMG,MAAM,GAAG,cAAf,CAHwB,CAIxB;AACA;;AACA,QAAMC,QAAQ,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KACd,qCAAoCA,WAAY,YAAWF,MAAO,EADrE;;AAGA,sBACE,QAAC,sBAAD;AACE,IAAA,KAAK,EAAEL,KADT;AAEE,IAAA,QAAQ,EAAEC,QAFZ;AAGE,IAAA,QAAQ,EAAEG,YAHZ;AAIE,IAAA,QAAQ,EAAEE,QAJZ;AAKE,IAAA,gBAAgB,EAAEhB,gBALpB;AAAA,cAOG,CAAC;AAAEkB,MAAAA,UAAF;AAAcC,MAAAA,kBAAd;AAAkCC,MAAAA,WAAlC;AAA+CC,MAAAA,KAA/C;AAAsDC,MAAAA;AAAtD,KAAD,KAAqE;AACpE,UAAID,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACX,0BACE;AAAA,gCACE,sBAAWH,UAAU,CAAC;AAAEK,YAAAA,WAAW,EAAE;AAAf,WAAD;AAArB;AAAA;AAAA;AAAA;AAAA,gBADF,EAEGD,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFd,EAGGF,WAAW,CAACI,MAAZ,GAAqB,CAArB,iBACC;AAAA,oBACGJ,WAAW,CAACjB,GAAZ,CAAgBsB,UAAU,iBACzB,oBAASN,kBAAkB,CAACM,UAAD,CAA3B;AAAA,sBACGA,UAAU,CAACpB;AADd;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAeD;AAxBH;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD,CArCD;;GAAMI,W;;KAAAA,W;AAuCN,eAAeA,WAAf","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\n\nimport React from \"react\";\nimport ReactFetchAutocomplete from \"react-fetch-autocomplete\";\n\n\n\n// A custom suggestion parser which should always\n// return an array of objects\n// containing at least a description\nconst suggestionParser = data =>\n  data.features.map(feature => ({\n    description: feature.place_name,\n    coords: feature.center\n  }));\n\nconst MyComponent = () => {\n  const [value, setValue] = useState(\"\");\n  const [selection, setSelection] = useState(null);\n  const apiKey = \"Your_API_key\";\n  // fetchUrl is in this case a method that returns\n  // a URL but can also be a plain string\n  const fetchUrl = ({ searchQuery }) =>\n    `http://yourendpoint.com?someParam=${searchQuery}&api_key=${apiKey}`;\n\n  return (\n    <ReactFetchAutocomplete\n      value={value}\n      onChange={setValue}\n      onSelect={setSelection}\n      fetchUrl={fetchUrl}\n      suggestionParser={suggestionParser}\n    >\n      {({ inputProps, getSuggestionProps, suggestions, error, loading }) => {\n        if (error) return <div>We have an error..</div>;\n        return (\n          <div>\n            <input {...inputProps({ placeholder: \"Search for something..\" })} />\n            {loading && <div>Loading..</div>}\n            {suggestions.length > 0 && (\n              <div>\n                {suggestions.map(suggestion => (\n                  <div {...getSuggestionProps(suggestion)}>\n                    {suggestion.description}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        );\n      }}\n    </ReactFetchAutocomplete>\n  );\n};\n\nexport default MyComponent;\n"]},"metadata":{},"sourceType":"module"}